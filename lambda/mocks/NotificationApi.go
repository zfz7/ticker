// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	pushover "github.com/gregdel/pushover"
	mock "github.com/stretchr/testify/mock"
)

// NotificationApi is an autogenerated mock type for the NotificationApi type
type NotificationApi struct {
	mock.Mock
}

// Send provides a mock function with given fields: message
func (_m *NotificationApi) Send(message *pushover.Message) (pushover.Response, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 pushover.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*pushover.Message) (pushover.Response, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*pushover.Message) pushover.Response); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(pushover.Response)
	}

	if rf, ok := ret.Get(1).(func(*pushover.Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationApi creates a new instance of NotificationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationApi {
	mock := &NotificationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
