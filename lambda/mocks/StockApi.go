// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	finnhub "github.com/Finnhub-Stock-API/finnhub-go/v2"
	mock "github.com/stretchr/testify/mock"
)

// StockApi is an autogenerated mock type for the StockApi type
type StockApi struct {
	mock.Mock
}

// MarketStatus provides a mock function with given fields: exchange
func (_m *StockApi) MarketStatus(exchange string) (finnhub.MarketStatus, error) {
	ret := _m.Called(exchange)

	if len(ret) == 0 {
		panic("no return value specified for MarketStatus")
	}

	var r0 finnhub.MarketStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (finnhub.MarketStatus, error)); ok {
		return rf(exchange)
	}
	if rf, ok := ret.Get(0).(func(string) finnhub.MarketStatus); ok {
		r0 = rf(exchange)
	} else {
		r0 = ret.Get(0).(finnhub.MarketStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(exchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Quote provides a mock function with given fields: ticker
func (_m *StockApi) Quote(ticker string) (finnhub.Quote, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for Quote")
	}

	var r0 finnhub.Quote
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (finnhub.Quote, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) finnhub.Quote); ok {
		r0 = rf(ticker)
	} else {
		r0 = ret.Get(0).(finnhub.Quote)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStockApi creates a new instance of StockApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockApi {
	mock := &StockApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
